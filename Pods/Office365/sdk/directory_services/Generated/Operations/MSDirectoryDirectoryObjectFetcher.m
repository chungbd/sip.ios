/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/
#import "MSDirectoryFetchers.h"

@implementation MSDirectoryDirectoryObjectFetcher

@synthesize operations = _operations;

- (instancetype)initWithUrl:(NSString *)urlComponent parent:(id<MSOrcExecutable>)parent {

    if (self = [super initWithUrl:urlComponent parent:parent asClass:[MSDirectoryDirectoryObject class]]) {

		_operations = [[MSDirectoryDirectoryObjectOperations alloc] initOperationWithUrl:urlComponent parent:parent];
    }

    return self;
}

- (void)update:(id)entity callback:(void (^)(MSDirectoryDirectoryObject *directoryObject, MSOrcError *e))callback {

	return [super update:entity callback:callback];
}

- (void)delete:(void (^)(int status, MSOrcError *e))callback {

	return [super deleteWithCallback:callback];
}

- (MSDirectoryDirectoryObjectFetcher *)addCustomParametersWithName:(NSString *)name value:(id)value {
    [super addCustomParametersWithName:name value:value];
    
    return self;
}

- (MSDirectoryDirectoryObjectFetcher *)addCustomHeaderWithName:(NSString *)name value:(NSString *)value {
    [super addCustomHeaderWithName:name value:value];
    
    return self;
}

- (MSDirectoryDirectoryObjectFetcher *)select:(NSString *)params {
    [super select:params];
    
    return self;
}

- (MSDirectoryDirectoryObjectFetcher *)expand:(NSString *)value {
    [super select:value];
    
    return self;
}

- (void) readWithCallback:(void (^)(MSDirectoryDirectoryObject *directoryObject, MSOrcError *error))callback {
    [super readWithCallback:^(id response, MSOrcError *error) {
        callback(response, error);
    }];
}

- (MSDirectoryDirectoryObjectFetcher *)createdOnBehalfOf {

	 return [[MSDirectoryDirectoryObjectFetcher alloc] initWithUrl:@"createdOnBehalfOf" parent:self asClass:[MSDirectoryDirectoryObject class]];
}

- (MSDirectoryDirectoryObjectCollectionFetcher *)createdObjects {

    return [[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"createdObjects" parent:self asClass:[MSDirectoryDirectoryObject class]];
}

- (MSDirectoryDirectoryObjectFetcher *)getCreatedObjectsById:(NSString *)id {

    return [[[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"createdObjects" parent:self asClass:[MSDirectoryDirectoryObject class]] getById:id];
}

- (MSDirectoryDirectoryObjectFetcher *)manager {

	 return [[MSDirectoryDirectoryObjectFetcher alloc] initWithUrl:@"manager" parent:self asClass:[MSDirectoryDirectoryObject class]];
}

- (MSDirectoryDirectoryObjectCollectionFetcher *)directReports {

    return [[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"directReports" parent:self asClass:[MSDirectoryDirectoryObject class]];
}

- (MSDirectoryDirectoryObjectFetcher *)getDirectReportsById:(NSString *)id {

    return [[[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"directReports" parent:self asClass:[MSDirectoryDirectoryObject class]] getById:id];
}

- (MSDirectoryDirectoryObjectCollectionFetcher *)members {

    return [[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"members" parent:self asClass:[MSDirectoryDirectoryObject class]];
}

- (MSDirectoryDirectoryObjectFetcher *)getMembersById:(NSString *)id {

    return [[[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"members" parent:self asClass:[MSDirectoryDirectoryObject class]] getById:id];
}

- (MSDirectoryDirectoryObjectCollectionFetcher *)memberOf {

    return [[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"memberOf" parent:self asClass:[MSDirectoryDirectoryObject class]];
}

- (MSDirectoryDirectoryObjectFetcher *)getMemberOfById:(NSString *)id {

    return [[[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"memberOf" parent:self asClass:[MSDirectoryDirectoryObject class]] getById:id];
}

- (MSDirectoryDirectoryObjectCollectionFetcher *)owners {

    return [[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"owners" parent:self asClass:[MSDirectoryDirectoryObject class]];
}

- (MSDirectoryDirectoryObjectFetcher *)getOwnersById:(NSString *)id {

    return [[[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"owners" parent:self asClass:[MSDirectoryDirectoryObject class]] getById:id];
}

- (MSDirectoryDirectoryObjectCollectionFetcher *)ownedObjects {

    return [[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"ownedObjects" parent:self asClass:[MSDirectoryDirectoryObject class]];
}

- (MSDirectoryDirectoryObjectFetcher *)getOwnedObjectsById:(NSString *)id {

    return [[[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"ownedObjects" parent:self asClass:[MSDirectoryDirectoryObject class]] getById:id];
}

- (MSDirectoryApplicationFetcher *)asApplication {

	return [[MSDirectoryApplicationFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryApplication class]];
}

- (MSDirectoryUserFetcher *)asUser {

	return [[MSDirectoryUserFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryUser class]];
}

- (MSDirectoryExtensionPropertyFetcher *)asExtensionProperty {

	return [[MSDirectoryExtensionPropertyFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryExtensionProperty class]];
}

- (MSDirectoryContactFetcher *)asContact {

	return [[MSDirectoryContactFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryContact class]];
}

- (MSDirectoryDeviceFetcher *)asDevice {

	return [[MSDirectoryDeviceFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryDevice class]];
}

- (MSDirectoryDeviceConfigurationFetcher *)asDeviceConfiguration {

	return [[MSDirectoryDeviceConfigurationFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryDeviceConfiguration class]];
}

- (MSDirectoryDirectoryLinkChangeFetcher *)asDirectoryLinkChange {

	return [[MSDirectoryDirectoryLinkChangeFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryDirectoryLinkChange class]];
}

- (MSDirectoryAppRoleAssignmentFetcher *)asAppRoleAssignment {

	return [[MSDirectoryAppRoleAssignmentFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryAppRoleAssignment class]];
}

- (MSDirectoryGroupFetcher *)asGroup {

	return [[MSDirectoryGroupFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryGroup class]];
}

- (MSDirectoryDirectoryRoleFetcher *)asDirectoryRole {

	return [[MSDirectoryDirectoryRoleFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryDirectoryRole class]];
}

- (MSDirectoryDirectoryRoleTemplateFetcher *)asDirectoryRoleTemplate {

	return [[MSDirectoryDirectoryRoleTemplateFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryDirectoryRoleTemplate class]];
}

- (MSDirectoryServicePrincipalFetcher *)asServicePrincipal {

	return [[MSDirectoryServicePrincipalFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryServicePrincipal class]];
}

- (MSDirectoryTenantDetailFetcher *)asTenantDetail {

	return [[MSDirectoryTenantDetailFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryTenantDetail class]];
}

@end